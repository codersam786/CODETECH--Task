class StudentGradeManager:
    def __init__(self, name):
        self.name = name
        self.grades = {}  # To store subject/assignment and its grade

    def input_grades(self):
        """Allows user to input grades for different subjects/assignments."""
        while True:
            subject = input("Enter the subject/assignment name (or type 'done' to finish): ").strip()
            if subject.lower() == 'done':
                break
            try:
                grade = float(input(f"Enter grade for {subject}: "))
                self.grades[subject] = grade
            except ValueError:
                print("Invalid grade input. Please enter a numeric value.")

    def calculate_average(self):
        """Calculates the average grade."""
        if not self.grades:
            return 0
        total = sum(self.grades.values())
        return total / len(self.grades)

    def calculate_letter_grade(self, average):
        """Returns the letter grade based on the average score."""
        if average >= 90:
            return "A"
        elif average >= 80:
            return "B"
        elif average >= 70:
            return "C"
        elif average >= 60:
            return "D"
        else:
            return "F"

    def display_results(self):
        """Displays the results: grades, average, and overall letter grade."""
        if not self.grades:
            print("No grades have been entered.")
            return

        print(f"\nStudent: {self.name}")
        print("Grades:")
        for subject, grade in self.grades.items():
            print(f"{subject}: {grade}")

        average = self.calculate_average()
        letter_grade = self.calculate_letter_grade(average)

        print(f"\nAverage Grade: {average:.2f}")
        print(f"Overall Grade: {letter_grade}")

def main():
    # Get student information
    name = input("Enter the student's name: ")

    # Create a StudentGradeManager object
    manager = StudentGradeManager(name)

    # Allow the user to input grades
    manager.input_grades()

    # Display the results
    manager.display_results()

if __name__ == "__main__":
    main()
